# This program is used to verify the integrity of the output files
# using the checksums_xxh3_64.csv file generated by create_output_xxhash.py

import os
import xxhash

OUTPUT_DIR = "./output/"


# Function to verify the integrity of the output files, print the files that does not match or missing
def main():
    print("Verifying hashes...")

    # Get hash dict from checksums_xxh3_64.csv
    hashes = {}
    with open("./checksums_xxh3_64.csv", "r") as f:
        for line in f.readlines():
            filename, xxh3_64 = line.strip().split(",")
            hashes[filename.replace("\\", "/")] = xxh3_64

    # Get all file names in hashes
    files = hashes.keys()

    # Verify hashes of all files, print the files that does not match or missing at the end
    missing = []
    not_match = []
    for id, file in enumerate(files):
        file_path = OUTPUT_DIR + file
        print(f"({id + 1} of {len(files)}) Verifying {file}...", end=" ")

        if not os.path.exists(file_path):
            missing.append(file)
            print("not found")
            continue

        with open(file_path, "rb") as f:
            if xxhash.xxh3_64(f.read()).hexdigest() != hashes[file]:
                print("not match")
                not_match.append(file)
                continue

        print("ok")

    # Print if all files are ok
    if len(missing) == 0 and len(not_match) == 0:
        print("\nAll files are ok")

    else:
        # Print the files that does not match or missing
        print("\nMissing files:")
        for id, file in enumerate(missing):
            print(file[OUTPUT_DIR:])
            if id > 10:
                print("...")
                break

        print("\nFiles does not match:")
        for id, file in enumerate(not_match):
            print(file[OUTPUT_DIR:])
            if id > 10:
                print("...")
                break

    # Wait for user input
    input("\nPress enter to exit...")


if __name__ == "__main__":
    main()
